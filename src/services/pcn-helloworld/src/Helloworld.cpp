/*
 * Copyright 2018 The Polycube Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Modify these methods with your own implementation

#include "Helloworld.h"

// files generated by cmake from "Helloworld_dp_{ingress, egress}.c
#include "Helloworld_dp_egress.h"
#include "Helloworld_dp_ingress.h"

using namespace polycube::service;

Helloworld::Helloworld(const std::string name, const HelloworldJsonObject &conf)
    : Cube(conf.getBase(), {helloworld_code_ingress}, {helloworld_code_egress}),
      HelloworldBase(name) {
  logger()->info("Creating Helloworld instance");
  setAction(conf.getAction());

  // initialize ports map (at this point there are not ports)
  update_ports_map();

  addPortsList(conf.getPorts());
  // initialize_crypto();
}

Helloworld::~Helloworld() {
  logger()->info("Destroying Helloworld instance");
}

void Helloworld::packet_in(Ports &port, polycube::service::PacketInMetadata &md,
                           const std::vector<uint8_t> &packet) {
    logger()->info("packet arrived to the slowpath from port {0}", port.name());

    // ペイロード部分の暗号化
    int out_len1 = 0, out_len2 = 0;
    unsigned char *modifiable_packet = const_cast<unsigned char*>(packet.data());
    struct ethhdr *eth = (struct ethhdr *)(modifiable_packet);
    struct iphdr *iph = (struct iphdr *)(modifiable_packet + sizeof(ethhdr));
    // printf("source IP address: %d.%d.%d.%d\n", iph->saddr & 0xFF, (iph->saddr >> 8) & 0xFF,
    //                 (iph->saddr >> 16) & 0xFF, (iph->saddr >> 24) & 0xFF);
    // printf("dest IP address: %d.%d.%d.%d\n", iph->daddr & 0xFF, (iph->daddr >> 8) & 0xFF,
    //                   (iph->daddr >> 16) & 0xFF, (iph->daddr >> 24) & 0xFF);

    // EVP_CIPHER_CTX_reset(ctx);
    // EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv);

    // if (EVP_EncryptUpdate(ctx, packet.data(), &out_len1, packet.data(), packet.size()) != 1) {
    //     logger()->error("EVP_EncryptUpdate failed");
    //     return;
    // }

    // if (EVP_EncryptFinal_ex(ctx, packet.data(), &out_len1, &out_len2) != 1) {
    //     logger()->error("EVP_EncryptFinal_ex failed");
    //     return;
    // }

    // パケットの全体サイズの調整
    // packet.resize(payload_offset + out_len1 + out_len2);

    // パケットの送信
    EthernetII p(modifiable_packet, packet.size());
    port.send_packet_out(p);
}

// int Helloworld::initialize_crypto() {
//     // キーの初期化（実際の使用では安全に管理する必要があります）
//   key = reinterpret_cast<unsigned char *>("0123456789abcdef");
  
//   iv = new unsigned char[iv_len];
//   if (!iv) {
//     // print_error("Failed to allocate IV");
//     return -1;
//   }
//   if (RAND_bytes(iv, iv_len) != 1) {
//     // print_error("Failed to generate random IV");
//     return -1;
//   }
//   ctx = EVP_CIPHER_CTX_new();
//   if (!ctx) {
//     // print_error("Failed to create ENV_CIPHER_CTX");
//     return -1;
//   }
//   if (EVP_EncryptInit_ex(ctx, EVP_aes_128_gcm(), NULL, NULL, NULL) != 1) {
//     // print_error("EVP_EncrptInit_ex failed");
//     return -1;
//   }
//   if (EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_GCM_SET_IVLEN, iv_len, NULL) != 1) {
//     // print_error("Failed to set IV length for GCM");
//     return -1;
//   }
//   if (EVP_EncryptInit_ex(ctx, NULL, NULL, key, iv) != 1) {
//     // print_error("Failed to initialize key and IV for GCM");
//     return -1;
//   }
//   return 0;
// }

HelloworldActionEnum Helloworld::getAction() {
  uint8_t value = get_array_table<uint8_t>("action_map").get(0x0);
  return static_cast<HelloworldActionEnum>(value);
}

void Helloworld::setAction(const HelloworldActionEnum &value) {
  uint8_t action = static_cast<uint8_t>(value);
  get_array_table<uint8_t>("action_map").set(0x0, action);
}

void Helloworld::addPorts(const std::string &name,
                          const PortsJsonObject &conf) {
  if (get_ports().size() == 2) {
    throw std::runtime_error("maximum number of ports reached");
  }

  add_port<PortsJsonObject>(name, conf);
  logger()->info("port {0} was connected", name);
  update_ports_map();
}

void Helloworld::delPorts(const std::string &name) {
  remove_port(name);
  logger()->info("port {0} was removed", name);
  update_ports_map();
}

void Helloworld::update_ports_map() {
  auto ports_table = get_array_table<uint16_t>("ports_map");
  auto ports = get_ports();
  uint32_t i = 0;

  for (auto &port: ports) {
    ports_table.set(i, port->index());
    i++;
  }

  // mark other ports as empty (UINT16_MAX means empty)
  while (i < 2) {
    ports_table.set(i, UINT16_MAX);
    i++;
  }
}
